{"version":3,"file":"static/js/397.dc5cf610.chunk.js","mappings":"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","sources":["redux/selectors.js","components/Form/Form.styled.js","components/Form/Form.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/Contacts/Contacts.styled.js","components/Contacts/Contacts.js","components/App.styled.jsx","pages/Contacts.js"],"sourcesContent":["export const selectContacts = state => state.contacts.contacts;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\n\nexport const selectStatusFilter = state => state.filter.filter;\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\ndisplay: flex;\n\nflex-direction: column;\npadding:10px;\npadding-top: 20px;\n`\n\nexport const Btn = styled.button`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin:0 auto;\n\n    width: 200px;\n    height: 44px;\n\n    font-size: 16px;\n    padding: 10px;\n    border-radius: 22px;\n    border: none;\n    background-color: #BEE1E6;\n    box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.1);\n    \n    cursor: pointer;\n    outline: none;\n    \n    &:hover: {\n    background-color: #2EE59D;\n    box-shadow: 0px 15px 20px rgba(46, 229, 157, 0.4);\n    color: #fff;\n    \n    }\n`","import React from 'react';\n//import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { addContacts } from 'redux/operations';\n\nimport { nanoid } from \"nanoid\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport { Formik, Form, Field } from 'formik';\n\nimport styled from 'styled-components';\n\nimport { Label, Btn, } from './Form.styled';\n\n\nconst initialValues = {\n    name: '',\n    number: ''\n};\n\nconst Input = styled(Field)`\nfont-size: 18px;\npadding: 10px 15px;\nmargin: 10px;\nborder: 2px solid #D4E6F1;\nborder-radius: 2px;\n    &:focus{\n        outline:none;\n        border-radius: 6px;\n        box-shadow: 0 0 10px #93caff;\n    }\n`\nconst Forma = styled(Form)`\npadding: 20px;\nborder: 0px solid #7FB3D5;\nbox-shadow: 6px 2px 10px -1px rgba(127, 179, 213, 1);\n`\nexport const FormLabel = () => {\n\n    const dispatch = useDispatch();\n  \n    const contacts = useSelector(selectContacts);\n    \n    console.log(contacts);\n    \n    const handleSubmit = ( values, { resetForm }) => {\n    console.log(values);\n    \n        values.id = nanoid();\n        contacts.find(contact => contact.name.toLowerCase() === values.name.toLowerCase())\n       ? Notify.info('Contacts is already in list-contacts')\n       \n       : dispatch(addContacts( values ))   && resetForm();\n        //dispatch(addContacts( values ));\n        Notify.success('Add new contact'); \n        \n  };\n\n\n    return (\n        <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n            <Forma autoComplete='off'>\n                <Label htmlFor=\"Name\">\n                    Name\n                    <Input\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                />\n                </Label>\n                \n                <Label htmlFor=\"Number\">\n                    Number\n                    <Input\n                    type=\"text\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n\n                    required\n                />\n                </Label>\n                <Btn type=\"submit\">Add contact</Btn>\n            </Forma>\n        </Formik>\n    )\n}\n\n// FormLabel.propTypes = {\n//     handleSubmit: PropTypes.func.isRequired,\n    \n// }\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\ndisplay: flex;\nflex-direction: column;\npadding-top: 20px;\n`\nexport const Input = styled.input`\nfont-size: 18px;\npadding: 10px 15px;\nmargin: 10px;\nborder: 2px solid #D4E6F1;\nborder-radius: 2px;\n     &:focus{\n        outline:none;\n        border-radius: 6px;\n        box-shadow: 0 0 10px #93caff;\n    }\n`","//import PropTypes from 'prop-types';\n\nimport { useDispatch, useSelector} from 'react-redux';\nimport { setStatusFilter } from 'redux/filterSlice';\nimport {selectStatusFilter} from 'redux/selectors';\n \nimport { Label, Input } from './Filter.styled';\n\n\n\nexport const Filter = () => {\n\n  const dispatch = useDispatch();\n  const filter = useSelector(selectStatusFilter);    \n  \n  const filterContact = (e) => {\n\n    dispatch(setStatusFilter(e.currentTarget.value.trim()))\n  }\n\n  return (\n    <Label>\n      Find contacts by name\n      <Input\n        \n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={filter}\n        onChange={filterContact}\n        \n      />\n    </Label>\n  );\n};\n\n// Filter.propTypes = {\n//     filter: PropTypes.string.isRequired,\n//     filterContact: PropTypes.func.isRequired,\n// };","import styled from \"styled-components\";\n\nexport const ListContacts = styled.ul`\ndisplay:flex;\nflex-direction:column;\n\n`\n\nexport const ItemContacts = styled.li`\ndisplay: flex;\nalign-items: center;\njustify-content: space-between;\npadding: 10px 5px;\n`\n\nexport const Btn = styled.button`\n    font-size: 16px;\n    padding: 10px 15px 10px 15px;\n    border-radius: 50px;\n    border: none;\n    background:#BEE1E6; \n    color: 52, 73, 94;\n    cursor: pointer;\n    outline: none;\n    box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.1);\n\n    &:hover: {\n    background-color: 214, 234, 248, 0.5;\n    color: 52, 73, 94;\n    }\n`","//import PropTypes from 'prop-types';\nimport { useDispatch, useSelector} from 'react-redux';\nimport { deleteContacts } from 'redux/operations';\nimport { selectContacts } from 'redux/selectors';\n\nimport { ListContacts, ItemContacts, Btn } from './Contacts.styled';\nimport { setStatusFilter } from 'redux/filterSlice';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport { RiDeleteBinLine} from 'react-icons/ri';\n\nexport const FormContacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(setStatusFilter);\n\n  //const normalizedFilter = filter.toLowerCase();\n  const contactsFilter = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.payload.filter.filter)\n  );\n  \n  console.log(contactsFilter);\n  console.log(filter.payload.filter.filter);\n\n  return (\n    < ListContacts >\n      \n      {contactsFilter.map(contact => (\n        <ItemContacts key={contact.id}>\n                    {contact.name}:     {contact.number}\n                    <Btn type=\"button\" onClick={()=>dispatch(deleteContacts(contact.id)) && Notify.info('Delete contact')}>\n            \n            <RiDeleteBinLine/>\n                    </Btn>\n        </ItemContacts>\n      )\n                 \n        \n      )}\n    </ListContacts>\n  );\n};\n\n\n\n// FormContacts.propTypes = {\n//      contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     })\n//   ).isRequired,\n   \n// };","import styled from \"styled-components\";\n\nexport const Box = styled.div`\n    display=flex;\n    margin-left:20px;\n    margin: 0 auto;\n    padding:5px;\n    border-radius:2px;\n    width: 400px;    \n    box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.1);\n    background-image: url(https://img.freepik.com/free-vector/hand-painted-watercolor-pastel-sky-background_23-2148902771.jpg?w=2000)\n   \n`\n\nexport const Container = styled.div`\n        height: '150vh',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        fontSize: 20,\n        color: '#010101',\n                \n`\nexport const Title = styled.h1`\n        display: flex;\n        align-items: center;\n        gap: 10px;\n`\nexport const SubTitle = styled.h2`\n        display: flex;\n        align-items: center;\n        gap: 10px;\n`","import { fetchContacts } from 'redux/operations'; \nimport { FormLabel } from 'components/Form/Form'; \nimport { Filter } from 'components/Filter/Filter'; \nimport { FormContacts } from 'components/Contacts/Contacts';  \n//import { nanoid } from \"nanoid\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\n\nimport { Container, Box, Title, SubTitle} from 'components/App.styled';\nimport { FcContacts } from 'react-icons/fc';\nimport { FcMultipleSmartphones } from 'react-icons/fc';\nimport { selectError, selectIsLoading } from 'redux/selectors';\nimport { Loader } from 'components/Loader/Loader'; \n\nexport default function Contacts() {\n    const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  },[dispatch])\n     \n    \n    return (\n    <Box>\n      <Container >\n          \n          <Title><FcContacts />\n            Phonebook          \n          </Title> \n          <FormLabel/>\n          \n          <SubTitle><FcMultipleSmartphones/>\n            Contacts\n          </SubTitle>\n          <Filter />\n          \n         <FormContacts/>  \n         {isLoading && !error && <Loader/>} \n      </Container>\n    </Box> \n   );\n}"],"names":["selectContacts","state","contacts","selectIsLoading","isLoading","selectError","error","selectStatusFilter","filter","Label","styled","Btn","initialValues","name","number","Input","Field","Forma","Form","FormLabel","dispatch","useDispatch","useSelector","console","log","onSubmit","values","resetForm","id","nanoid","find","contact","toLowerCase","Notify","addContacts","autoComplete","htmlFor","type","pattern","title","required","Filter","value","onChange","e","setStatusFilter","currentTarget","trim","ListContacts","ItemContacts","FormContacts","contactsFilter","includes","payload","map","onClick","deleteContacts","Box","Container","Title","SubTitle","Contacts","useEffect","fetchContacts","Loader"],"sourceRoot":""}